; ########################################################################################
; # Generated by the active disassembly feature of the Exodus emulation platform
; #
; # Creation Date:   2020-11-25 23:38:26
; # Analysis Region: 0x000038BE - 0x000038CE
; ########################################################################################
; summary
;	this subroutine increments the VRAM offset to draw the next character
;	it also bounds the safe limits for drawing text in VRAM
;
; modifications	
;	change increment value for 8x16 font
;	adjust safe VRAM addresses given we're still writing $80 of tiles
;	i don't think i need the extra space anyway, could probably really simplify this...


NextVRAMTile	equr	a2	; Offset for next VRAM tile to fill
RowCounter	equr	d4	; this is incremented, not sure where, after a button is pressed to scroll additional lines of text
VRAMBaseOffset	equ	$F000	
VRAMUpperBound	equ	$FFC0	; don't write to VRAM if we hit this offset
ExtraSpaceOffset	equ	$DD00	; some extra VRAM space allocated for drawing text, originally $DF00
ExtraSpaceUpperBound	equ	$DFC0	; other data is stored at $E000, so don't write past this value
VRAMOffsetStep	equ	$0040	; step value for incrementing VRAM offset, $40 is suitable for 8x16 font

 org $000038BE

	NOP		; this is just for padding
	ADDA.w	VRAMOffsetStep, NextVRAMTile	
	CMPA.w	ExtraSpaceUpperBound, NextVRAMTile	; check to avoid overwriting existing data at $E000
	BNE.b	NotAtExtraSpaceUpperBound	
	MOVEA.w	VRAMBaseOffset, NextVRAMTile
	BRA.b	Done	

NotAtExtraSpaceUpperBound:
	CMPA.w	VRAMUpperBound, NextVRAMTile	
	BNE.b	Done
	MOVEA.w	ExtraSpaceOffset, NextVRAMTile		; safe value is $DF00 but i'm craaazy
	
Done:
	MOVE.w	RowCounter, D0
	TRAP	#5