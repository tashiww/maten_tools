; ########################################################################################
; # Generated by the active disassembly feature of the Exodus emulation platform
; #
; # this is a digit padding routine, adds 0f in front of numbers so they stay right-aligned
; #
; # Creation Date:   2021-1-9 20:38:15
; # Analysis Region: 0x0000379E - 0x000037F8
; ########################################################################################

 org $0000379E

	MOVEM.l	D5/D4/D3/D2/D1/D0, -(A7)
	MOVE.b	D4, D5	; this was set to $f before writing atk/def numbers, not sure why
	MOVEA.l	A0, A1	; ram location for number string, perhaps $FF32e8
	MOVE.w	D3, D0	; this was probably padding digit (3 for atk / def )
	BNE.b	CheckMaxPadding	
	MOVEQ	#6, D3	; set at 6 (100,000) if 0, i don't think this ever happens?
CheckMaxPadding:
	CMPI.w	#7, D3
	BCS.b	loc_000037B4
	MOVEQ	#6, D3	;
loc_000037B4:
	MOVEQ	#1, D4	; iteration counter i think
loc_000037B6:
	SUBQ.w	#1, D3	; decrementing padding #
	BEQ.b	loc_000037C0	; ran out of padding
	MULU.w	#$000A, D4	; times 10
	BRA.b	loc_000037B6	; 
loc_000037C0:
	MOVE.l	D4, D3	; 1e2 was $64 i guess
	MOVE.l	D2, D4	; this is the value to convert to decimal i guess ? $15a = 346
	CLR.w	D1
GetDigitCharacter:
	MOVEQ	#$00000010, D2	; start of numbers! in table.
IncrementCharacterByte:
	SUB.l	D3, D4	; padding 3 = 100, check if our value is at least 3 digits
	BMI.b	FoundCharacterByte
	ADDQ.w	#1, D2	; increment table byte
	MOVEQ	#1, D1	; this sets flag that we had a value in this position
	BRA.b	IncrementCharacterByte
FoundCharacterByte:
	ADD.l	D3, D4	; add the amount we were subtracting to get the remainder (346 - 300, 46 remaining)
	TST.w	D1
	BNE.b	StoreCharacterToRAM
	CMPI.w	#1, D3
	BEQ.b	StoreCharacterToRAM
	TST.w	D0
	BEQ.b	DontStoreCharacter
	MOVE.b	D5, D2	; this had $0f but i could make it $60 for my space character!
StoreCharacterToRAM:
	MOVE.b	D2, (A1)+	; add number character to string
DontStoreCharacter:
	DIVU.w	#$000A, D3	; go to next lower power of 10, 1/$a is $10000 or $0 as far as tst.w is concerned
	BNE.b	GetDigitCharacter
	MOVE.b	#0, (A1)	; NUL byte, string terminator
	MOVEM.l	(A7)+, D0/D1/D2/D3/D4/D5
	RTS
