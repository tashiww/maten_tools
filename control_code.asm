; ########################################################################################
; # Generated by the active disassembly feature of the Exodus emulation platform
; #
; # Creation Date:   2020-11-27 21:55:49
; # Analysis Region: 0x00003000 - 0x0000B000
; ########################################################################################

; this subroutine translates the "menu" table into the "japanese" table


CurrentNameCode	equr	d2	; data register with current character code
CurrentChar	equr	d0	; data register with cur
NameRAMCursor	equr	a0	; address register with start of string in ROM
StringRAMCursor	equr	a1	; RAM offset for current character
CharROMOffset	equr	a2	; address register with current character position in ROM
Stack	equr a7
FontTileOffset	equr d1

 org $00003550
ReadPCName:
	MOVEM.l	A2/A1/A0/D1/D0, -(A7)
	LEA	loc_000035E8(PC), A2 
	
ReadNextChar:
	CLR.w	CurrentChar
	MOVE.b	(NameRAMCursor)+, CurrentChar
	BNE.b	NotNull
	MOVE.b	#0, (StringRAMCursor)
	MOVEM.l	(A7)+, CurrentChar/D1/A0/A1/A2
	RTS
	
NotNull:
	CMPI.w	#$001A, CurrentChar	; check if number/symbol
	BCS.b	NumberBranch
	
	CMPI.w	#$003F, CurrentChar	; check if alphabet
	BCS.b	AlphaBranch
	BEQ.b	SpaceBranch	; if == $3F (empty space character)
	
	CMPI.w	#$007B, CurrentChar	; check if hiragana
	BCS.b	Hiragana	
	
	CMPI.w	#$007D, CurrentChar	
	BEQ.b	DashBranch	; check if dash
	
	CMPI.w	#$0080, CurrentChar	; 7E and 7F are non-text characters so they're skipped
	BCS.b	SpaceBranch	
	
	CMPI.w	#$00B7, CurrentChar	; check if katakana
	BCS.b	Katakana	
	CMPI.w	#$00B8, CurrentChar	; triangle character?
	BEQ.b	Triangle
	
SpaceBranch:
	MOVEQ	#$0000000F, FontTileOffset	
	BRA.b	WriteCharToRAM
	
AlphaBranch:
	MOVE.w	CurrentChar, FontTileOffset
	ADDI.w	#$00BE, FontTileOffset			; in the original font, alpha was offset by $BE. change this to match your font!
	BRA.b	WriteCharToRAM
	
DashBranch:
	MOVEQ	#$0000001F, FontTileOffset	
	BRA.b	WriteCharToRAM	
NumberBranch:
	MOVE.w	CurrentChar, FontTileOffset
	BRA.b	WriteCharToRAM
Triangle:
	MOVE.b	#1, (StringRAMCursor)+	
	MOVE.w	#$0083, FontTileOffset	
	BRA.b	WriteCharToRAM	
Hiragana:
	SUBI.w	#$0040, CurrentChar	
	CLR.w	FontTileOffset	
	MOVE.b	(A2,D0.w), FontTileOffset	
	BRA.b	loc_000035CC	
Katakana:
	SUBI.w	#$0080, CurrentChar	
	CLR.w	FontTileOffset	
	MOVE.b	(A2,D0.w), FontTileOffset	
	ADDI.w	#$0050, FontTileOffset	
loc_000035CC:
	MOVE.b	(NameRAMCursor), CurrentChar	
	CMPI.b	#$7B, CurrentChar	
	BEQ.b	loc_000035DE	
	CMPI.b	#$7C, CurrentChar	
	BNE.b	WriteCharToRAM	
	ADDQ.w	#2, FontTileOffset	
	BRA.b	loc_000035E0	
loc_000035DE:
	ADDQ.w	#1, FontTileOffset	
loc_000035E0:
	ADDQ.l	#1, NameRAMCursor	
	
WriteCharToRAM:
	MOVE.b	FontTileOffset, (StringRAMCursor)+
	BRA.w	ReadNextChar

loc_0000379E:
	MOVEM.l	D5/D4/D3/D2/D1/D0, -(A7)	
	MOVE.b	D4, D5	
	MOVEA.l	A0, StringRAMCursor	
	MOVE.w	D3, CurrentChar	
	BNE.b	loc_000037AC	
	MOVEQ	#6, D3	
loc_000037AC:
	CMPI.w	#7, D3	
	BCS.b	loc_000037B4	
	MOVEQ	#6, D3	
loc_000037B4:
	MOVEQ	#1, D4	
loc_000037B6:
	SUBQ.w	#1, D3	
	BEQ.b	loc_000037C0	
	MULU.w	#$000A, D4	
	BRA.b	loc_000037B6	
loc_000037C0:
	MOVE.l	D4, D3	
	MOVE.l	D2, D4	
	CLR.w	FontTileOffset	
loc_000037C6:
	MOVEQ	#$00000010,CurrentNameCode	
loc_000037C8:
	SUB.l	D3, D4	
	BMI.b	loc_000037D2	
	ADDQ.w	#1,CurrentNameCode	
	MOVEQ	#1, FontTileOffset	
	BRA.b	loc_000037C8	
loc_000037D2:
	ADD.l	D3, D4	
	TST.w	FontTileOffset	
	BNE.b	loc_000037E4	
	CMPI.w	#1, D3	
	BEQ.b	loc_000037E4	
	TST.w	CurrentChar	
	BEQ.b	loc_000037E6	
	MOVE.b	D5,CurrentNameCode	
loc_000037E4:
	MOVE.b	D2, (StringRAMCursor)+	
loc_000037E6:
	DIVU.w	#$000A, D3	
	BNE.b	loc_000037C6	
	MOVE.b	#0, (StringRAMCursor)	
	MOVEM.l	(A7)+, CurrentChar/D1/D2/D3/D4/D5	
	RTS	

loc_00003A70:
	CLR.w	D2	
	MOVE.b	(A2)+,CurrentNameCode	
	BEQ.w	loc_00003AFE	
	CMPI.b	#3,CurrentNameCode	
	BCC.b	loc_00003A84	
	MOVE.b	D2, (StringRAMCursor)+	
	MOVE.b	(A2)+, (StringRAMCursor)+	
	BRA.b	loc_00003A70	
loc_00003A84:
	BNE.b	loc_00003A9C	
	MOVEA.l	(A6)+, A0	
loc_00003A88:
	MOVE.b	(A0)+, D3	
	BEQ.b	loc_00003A9A	
	CMPI.b	#3, D3	
	BCC.b	loc_00003A96	
	MOVE.b	D3, (StringRAMCursor)+	
	MOVE.b	(A0)+, D3	
loc_00003A96:
	MOVE.b	D3, (StringRAMCursor)+	
	BRA.b	loc_00003A88	
loc_00003A9A:
	BRA.b	loc_00003A70	
loc_00003A9C:
	CMPI.b	#4,CurrentNameCode	
	BNE.b	loc_00003AB2	
	MOVE.l	(A6)+,CurrentNameCode	
	CLR.w	D3	
	MOVE.b	(A2)+, D3	
	MOVEA.l	A1, A0	
	MOVEQ	#$0000000F, D4	
	BSR.w	loc_0000379E	
	BRA.b	loc_00003A70	
loc_00003AB2:
	CMPI.b	#5,CurrentNameCode	
	BNE.b	loc_00003ACC	
	MOVE.b	(A2)+,CurrentNameCode
	BSR.w	loc_0000A1DC
	BSR.w	ReadPCName
loc_00003AC2:
	TST.b	(StringRAMCursor)
	BEQ.b	loc_00003ACA	
	ADDQ.l	#1, StringRAMCursor	
	BRA.b	loc_00003AC2	
loc_00003ACA:
	BRA.b	loc_00003A70	
loc_00003ACC:
	CMPI.b	#6,CurrentNameCode	
	BNE.b	loc_00003AE2	
	MOVEA.l	(A6)+, A0	
	BSR.w	ReadPCName	
loc_00003AD8:
	TST.b	(StringRAMCursor)	
	BEQ.b	loc_00003AE0	
	ADDQ.l	#1, StringRAMCursor	
	BRA.b	loc_00003AD8	
loc_00003AE0:
	BRA.b	loc_00003A70	
loc_00003AE2:
	CMPI.b	#$0F,CurrentNameCode	
	BCC.b	loc_00003AF8	
	CMPI.b	#$0D,CurrentNameCode	
	BEQ.b	loc_00003AF4	
	CMPI.b	#$0C,CurrentNameCode	
loc_00003AF2:
	BNE.b	loc_00003AF2	
loc_00003AF4:
	TST.w	FontTileOffset	
	BNE.b	loc_00003AFE	
loc_00003AF8:
	MOVE.b	D2, (StringRAMCursor)+	
	BRA.w	loc_00003A70	
loc_00003AFE:
	CLR.b	(StringRAMCursor)	
	MOVEA.l	A2, A0	
	SUBQ.l	#1, A0	
	MOVEM.l	(A7)+, CurrentChar/D1/D2/D3/D4/A1/A2	
	RTS	
	
	
loc_0000A1DC:
	MOVE.l	CurrentNameCode, -(A7)
	LEA	$00FFD4CC, A0			; ram offset for user-defined names
	EXT.w	CurrentNameCode
	SUBQ.w	#1,CurrentNameCode	; no offset for first name ($0501 = <player>)
	MULU.w	#$000E,CurrentNameCode	; 6 chars per name +$00 = $E bytes
	ADDA.l	CurrentNameCode, A0
	MOVE.l	(A7)+,CurrentNameCode
	RTS
	